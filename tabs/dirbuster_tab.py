from PySide2.QtCore import Qt, Slot
from PySide2.QtGui import QCursor, QIcon
from PySide2.QtWidgets import (
    QApplication,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QTableWidget,
    QTableWidgetItem,
    QVBoxLayout,
    QWidget,
    QFileDialog,
    QFrame,
    QSizePolicy,
    QMenu,
    QWidgetAction,
)
from scripts.dirbuster import is_valid_url, scan
import os
import webbrowser


class DirBusterTab(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.items = 0

        # Left
        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Status Code", "URL"])
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.clicked.connect(self.item_clicked)

        # Right
        self.url_label = QLabel("Enter URL:")
        self.url_label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.url_input = QLineEdit()
        self.wordlist_path = "wordlists/dir.txt"
        self.wl_label = QLabel(f"Wordlist (path): {self.wordlist_path}")
        self.wl_label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.open_wl_btn = QPushButton("Open wordlist")
        self.process_btn = QPushButton("Process")
        self.clear_btn = QPushButton("Clear")
        self.quit_btn = QPushButton("Quit")

        self.process_btn.setEnabled(False)

        # Creating layout
        self.right = QVBoxLayout()
        self.right.setMargin(10)

        # Right Widgets
        self.right.addWidget(self.url_label)
        self.right.addWidget(self.url_input)
        self.right.addWidget(self.wl_label)
        self.right.addWidget(self.open_wl_btn)

        self.right.addWidget(QFrame())

        self.right.addWidget(self.process_btn)
        self.right.addWidget(self.clear_btn)
        self.right.addWidget(self.quit_btn)

        # QWidget Layout
        self.layout = QHBoxLayout()

        self.layout.addWidget(self.table)
        self.layout.addLayout(self.right)

        # Set the layout to the QWidget
        self.setLayout(self.layout)

        # Signals and Slots
        self.process_btn.clicked.connect(self.start_scan)
        self.quit_btn.clicked.connect(self.quit_application)
        self.clear_btn.clicked.connect(self.clear_table)
        self.url_input.textChanged[str].connect(self.check_disable)
        self.open_wl_btn.clicked.connect(self.open_file_dialog)

    @Slot()
    def add_element(self, status_code, url):
        self.table.insertRow(self.items)
        status_code_item = QTableWidgetItem(str(status_code))
        status_code_item.setTextAlignment(Qt.AlignCenter)
        status_code_item.setFlags(status_code_item.flags() ^ Qt.ItemIsEditable)

        url_item = QTableWidgetItem(url)
        url_item.setFlags(url_item.flags() ^ Qt.ItemIsEditable)
        url_item.setToolTip("Open in Browser")

        self.table.setItem(self.items, 0, status_code_item)
        self.table.setItem(self.items, 1, url_item)

        self.items += 1

    def remove_item(self, line_number):
        if 0 <= line_number < self.items:
            self.table.removeRow(line_number)
            self.items -= 1

    @Slot()
    def item_clicked(self, item):
        context_menu = QMenu(self)

        browser_item = QWidgetAction(context_menu)
        browser_item.setText("Open in Browser")
        browser_item.setIcon(QIcon("assets/browser.png"))
        context_menu.addAction(browser_item)

        remove_item = QWidgetAction(context_menu)
        remove_item.setText("Remove Line")
        remove_item.setIcon(QIcon("assets/delete.png"))
        context_menu.addAction(remove_item)

        close_item = QWidgetAction(context_menu)
        close_item.setText("Close")
        close_item.setIcon(QIcon("assets/close.png"))
        context_menu.addAction(close_item)

        action = context_menu.exec_(QCursor.pos())

        if action == browser_item:
            if os.getuid() == 0:
                os.setuid(1000)

            if item.column():
                webbrowser.open(item.data())
            else:
                webbrowser.open(self.table.item(item.row(), 1).text())
        elif action == remove_item:
            self.remove_item(item.row())

    @Slot()
    def check_disable(self):
        if not self.url_input.text():
            self.process_btn.setEnabled(False)
        else:
            if is_valid_url(self.url_input.text()):
                self.process_btn.setEnabled(True)
            else:
                self.process_btn.setEnabled(False)

    @Slot()
    def start_scan(self):
        self.process_btn.setText("Scan running ...")

        for item in scan(self.url_input.text(), self.wordlist_path):
            if item:
                self.add_element(item[0], item[1])

        self.process_btn.setText("Process")

    def fill_table(self, data):
        for status_code, url in data.items():
            self.add_element(status_code, url)

    @Slot()
    def open_file_dialog(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.ExistingFile)
        dialog.setNameFilter("Text (* *.txt *.lst)")
        dialog.setViewMode(QFileDialog.Detail)
        dialog.setDirectory(os.path.dirname(os.path.realpath(__file__)))
        if dialog.exec_():
            self.wordlist_path = dialog.selectedFiles()[0]
            self.wl_label.setText(
                "Wordlist (path): " + os.path.basename(self.wordlist_path)
            )

    @Slot()
    def clear_table(self):
        self.table.setRowCount(0)
        self.items = 0
        self.url_input.setText("")

    @Slot()
    def quit_application(self):
        QApplication.quit()
