from PySide2.QtCore import Qt, Slot
from PySide2.QtGui import QCursor, QIcon
from PySide2.QtWidgets import (
    QApplication,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QTableWidget,
    QTableWidgetItem,
    QVBoxLayout,
    QWidget,
    QFrame,
    QSizePolicy,
    QMenu,
    QWidgetAction,
    QGroupBox,
    QComboBox,
    QCheckBox,
    QSlider,
)
from scripts.nmap_scan import check_valid_ip, nmap_scan
import webbrowser
import os


class NmapScanTab(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.items = 0

        # Left
        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Ports", "Services"])
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.clicked.connect(self.item_clicked)

        # Right
        self.base_ip = QLineEdit()
        self.process = QPushButton("Scan")
        self.clear = QPushButton("Clear")
        self.quit = QPushButton("Quit")

        self.process.setEnabled(False)

        # Creating layout
        self.right = QVBoxLayout()
        self.right.setMargin(10)

        # IP
        label = QLabel("Enter IP addr:")
        label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.right.addWidget(label)
        self.right.addWidget(self.base_ip)

        # Types of scan
        scan_types = QGroupBox("Types of scan:")
        self.scan_type_all = QCheckBox("All (-A)")
        self.scan_type_all.stateChanged.connect(self.box_changed_all)
        self.scan_type_script = QCheckBox("Script Scan (-sC)")
        self.scan_type_script.stateChanged.connect(self.box_changed_other)
        self.scan_type_version = QCheckBox("Version Scan (-sV)")
        self.scan_type_version.stateChanged.connect(self.box_changed_other)
        self.scan_type_os = QCheckBox("OS Scan (-O)")
        self.scan_type_os.stateChanged.connect(self.box_changed_other)
        check_layout = QVBoxLayout()
        check_layout.addWidget(self.scan_type_all)
        check_layout.addWidget(self.scan_type_script)
        check_layout.addWidget(self.scan_type_version)
        check_layout.addWidget(self.scan_type_os)
        scan_types.setLayout(check_layout)
        self.right.addWidget(scan_types)

        # Speed
        label = QLabel("Speed [0-5]:")
        label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.right.addWidget(label)
        self.speed_slider = QSlider(Qt.Horizontal)
        self.speed_slider.setMinimum(0)
        self.speed_slider.setMaximum(5)
        self.speed_slider.setValue(4)
        self.speed_slider.setTickPosition(QSlider.TicksBelow)
        self.right.addWidget(self.speed_slider)

        # Ports
        label = QLabel("Ports:")
        label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Fixed)
        self.right.addWidget(label)
        self.ports = QComboBox()
        self.ports.addItems(
            [
                "Well-known (0-1023)",
                "Well-known Extended (0-6667)",
                "Well-known + Registered ports (0-49151)",
                "All (0-65535)",
            ]
        )
        self.right.addWidget(self.ports)

        # Fill Space
        self.right.addWidget(QFrame())

        self.right.addWidget(self.process)
        self.right.addWidget(self.clear)
        self.right.addWidget(self.quit)

        # QWidget Layout
        self.layout = QHBoxLayout()

        self.layout.addWidget(self.table)
        self.layout.addLayout(self.right)

        # Set the layout to the QWidget
        self.setLayout(self.layout)

        # Signals and Slots
        self.process.clicked.connect(self.start_scan)
        self.quit.clicked.connect(self.quit_application)
        self.clear.clicked.connect(self.clear_table)
        self.base_ip.textChanged[str].connect(self.check_disable)

    @Slot()
    def box_changed_all(self, state):
        if state:
            self.scan_type_script.setChecked(True)
            self.scan_type_version.setChecked(True)
            self.scan_type_os.setChecked(True)
        else:
            if (
                self.scan_type_script.isChecked()
                and self.scan_type_version.isChecked()
                and self.scan_type_os.isChecked()
            ):
                self.scan_type_os.setChecked(False)
                self.scan_type_version.setChecked(False)
                self.scan_type_script.setChecked(False)

    @Slot()
    def box_changed_other(self, state):
        if self.scan_type_all.isChecked():
            if not state:
                self.scan_type_all.setChecked(False)
        if (
            self.scan_type_script.isChecked()
            and self.scan_type_version.isChecked()
            and self.scan_type_os.isChecked()
        ):
            self.scan_type_all.setChecked(True)

    @Slot()
    def add_element(self, port, service):
        self.table.insertRow(self.items)
        port_item = QTableWidgetItem(str(port))
        port_item.setTextAlignment(Qt.AlignCenter)
        port_item.setFlags(port_item.flags() ^ Qt.ItemIsEditable)

        service_item = QTableWidgetItem(str(service))
        service_item.setFlags(service_item.flags() ^ Qt.ItemIsEditable)
        service_item.setToolTip("Open in Exploit-db")

        self.table.setItem(self.items, 0, port_item)
        self.table.setItem(self.items, 1, service_item)

        self.items += 1

    def remove_item(self, line_number):
        if 0 <= line_number < self.items:
            self.table.removeRow(line_number)
            self.items -= 1

    @Slot()
    def item_clicked(self, item):
        context_menu = QMenu(self)

        browser_item = QWidgetAction(context_menu)
        browser_item.setText("Open exploit-db")
        browser_item.setIcon(QIcon("assets/spider.png"))
        context_menu.addAction(browser_item)

        remove_item = QWidgetAction(context_menu)
        remove_item.setText("Remove Line")
        remove_item.setIcon(QIcon("assets/delete.png"))
        context_menu.addAction(remove_item)

        close_item = QWidgetAction(context_menu)
        close_item.setText("Close")
        close_item.setIcon(QIcon("assets/close.png"))
        context_menu.addAction(close_item)

        action = context_menu.exec_(QCursor.pos())

        if action == browser_item:
            if os.getuid() == 0:
                os.setuid(1000)

            if item.column():
                webbrowser.open(
                    "https://www.exploit-db.com/search?q=" + item.data(), "--no-sandbox"
                )
            else:
                webbrowser.open(
                    "https://www.exploit-db.com/search?q="
                    + self.table.item(item.row(), 1).text(),
                    "--no-sandbox",
                )
        elif action == remove_item:
            self.remove_item(item.row())

    @Slot()
    def check_disable(self):
        if not self.base_ip.text():
            self.process.setEnabled(False)
        else:
            if check_valid_ip(self.base_ip.text()):
                self.process.setEnabled(True)
            else:
                self.process.setEnabled(False)

    @Slot()
    def start_scan(self):
        self.process.setText("Scan running ...")

        ip_addr = self.base_ip.text()

        scan_types = ""
        if self.scan_type_all.isChecked():
            scan_types = "-A"
        if self.scan_type_script.isChecked() and not self.scan_type_all.isChecked():
            scan_types += "-sC "
        if self.scan_type_version.isChecked() and not self.scan_type_all.isChecked():
            scan_types += "-sV "
        if self.scan_type_os.isChecked() and not self.scan_type_all.isChecked():
            scan_types += "-O "

        speed = f"-T{self.speed_slider.sliderPosition()}"

        index = self.ports.currentIndex()
        if index == 0:
            ports_range = "0-1023"
        elif index == 1:
            ports_range = "0-6667"
        elif index == 2:
            ports_range = "0-49151"
        else:
            ports_range = "-p-"

        print(ip_addr, scan_types, speed, ports_range)
        output = nmap_scan(ip_addr, scan_types, speed, ports_range)

        self.fill_table(output)

        self.process.setText("Scan")

    def fill_table(self, data):
        for status_code, url in data.items():
            self.add_element(status_code, url)

    @Slot()
    def clear_table(self):
        self.table.setRowCount(0)
        self.items = 0
        self.base_ip.setText("")

    @Slot()
    def quit_application(self):
        QApplication.quit()
